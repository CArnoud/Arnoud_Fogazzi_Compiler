Terminals unused in grammar

   TOKEN_ERROR


State 40 conflicts: 1 shift/reduce
State 73 conflicts: 12 shift/reduce
State 112 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: empty
    2        | declaration program
    3        | function program

    4 function: header body ';'

    5 header: variableType TK_IDENTIFIER '(' parameters ')'

    6 parameters: empty
    7           | parameterList

    8 parameterList: variableType TK_IDENTIFIER ',' parameterList
    9              | variableType TK_IDENTIFIER

   10 body: command ';'

   11 command: block
   12        | simpleCommand

   13 block: '{' simpleCommandList '}'

   14 simpleCommandList: empty
   15                  | simpleCommand simpleCommandList

   16 simpleCommand: assignment
   17              | input
   18              | output
   19              | return
   20              | if
   21              | loop

   22 assignment: TK_IDENTIFIER '=' expression
   23           | TK_IDENTIFIER '[' expression ']' '=' expression

   24 input: KW_INPUT TK_IDENTIFIER

   25 output: KW_OUTPUT elementList

   26 elementList: expression ',' elementList
   27            | expression

   28 return: KW_RETURN expression

   29 if: KW_IF '(' expression ')' KW_THEN command
   30   | KW_IF '(' expression ')' KW_ELSE command KW_THEN command

   31 loop: KW_LOOP command '(' expression ')'

   32 expression: functionCall
   33           | literal
   34           | TK_IDENTIFIER
   35           | TK_IDENTIFIER '[' expression ']'
   36           | "!" expression
   37           | reference
   38           | precedence
   39           | expression operator expression

   40 operator: "+"
   41         | "-"
   42         | "*"
   43         | "/"
   44         | "<"
   45         | ">"
   46         | OPERATOR_LE
   47         | OPERATOR_GE
   48         | OPERATOR_EQ
   49         | OPERATOR_NE
   50         | OPERATOR_AND
   51         | OPERATOR_OR

   52 functionCall: TK_IDENTIFIER '(' arguments ')'

   53 arguments: empty
   54          | argumentList

   55 argumentList: argument ',' argumentList
   56             | argument

   57 argument: expression

   58 precedence: '(' expression ')'

   59 reference: '&' TK_IDENTIFIER
   60          | '$' TK_IDENTIFIER

   61 declaration: simpleDeclaration
   62            | pointerDeclaration
   63            | arrayDeclaration

   64 simpleDeclaration: variableType TK_IDENTIFIER ':' literal ';'

   65 pointerDeclaration: '$' variableType TK_IDENTIFIER ':' literal ';'

   66 arrayDeclaration: variableType TK_IDENTIFIER '[' ';'
   67                 | variableType TK_IDENTIFIER '[' ':' literalList ';'

   68 variableType: KW_WORD
   69             | KW_BOOL
   70             | KW_BYTE

   71 literalList: literal literalList
   72            | literal

   73 literal: LIT_STRING
   74        | LIT_CHAR
   75        | LIT_INTEGER
   76        | LIT_TRUE
   77        | LIT_FALSE

   78 empty: /* empty */


Terminals, with rules where they appear

$end (0) 0
'$' (36) 60 65
'&' (38) 59
'(' (40) 5 29 30 31 52 58
')' (41) 5 29 30 31 52 58
',' (44) 8 26 55
':' (58) 64 65 67
';' (59) 4 10 64 65 66 67
'=' (61) 22 23
'[' (91) 23 35 66 67
']' (93) 23 35
'{' (123) 13
'}' (125) 13
error (256)
KW_WORD (258) 68
KW_BOOL (259) 69
KW_BYTE (260) 70
KW_IF (261) 29 30
KW_THEN (262) 29 30
KW_ELSE (263) 30
KW_LOOP (264) 31
KW_INPUT (265) 24
KW_OUTPUT (266) 25
KW_RETURN (267) 28
OPERATOR_LE (268) 46
OPERATOR_GE (269) 47
OPERATOR_EQ (270) 48
OPERATOR_NE (271) 49
OPERATOR_AND (272) 50
OPERATOR_OR (273) 51
TK_IDENTIFIER (274) 5 8 9 22 23 24 34 35 52 59 60 64 65 66 67
LIT_INTEGER (275) 75
LIT_FALSE (276) 77
LIT_TRUE (277) 76
LIT_CHAR (278) 74
LIT_STRING (279) 73
TOKEN_ERROR (280)
"!" (281) 36
"+" (282) 40
"-" (283) 41
"*" (284) 42
"/" (285) 43
"<" (286) 44
">" (287) 45


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1 2 3, on right: 0 2 3
function (47)
    on left: 4, on right: 3
header (48)
    on left: 5, on right: 4
parameters (49)
    on left: 6 7, on right: 5
parameterList (50)
    on left: 8 9, on right: 7 8
body (51)
    on left: 10, on right: 4
command (52)
    on left: 11 12, on right: 10 29 30 31
block (53)
    on left: 13, on right: 11
simpleCommandList (54)
    on left: 14 15, on right: 13 15
simpleCommand (55)
    on left: 16 17 18 19 20 21, on right: 12 15
assignment (56)
    on left: 22 23, on right: 16
input (57)
    on left: 24, on right: 17
output (58)
    on left: 25, on right: 18
elementList (59)
    on left: 26 27, on right: 25 26
return (60)
    on left: 28, on right: 19
if (61)
    on left: 29 30, on right: 20
loop (62)
    on left: 31, on right: 21
expression (63)
    on left: 32 33 34 35 36 37 38 39, on right: 22 23 26 27 28 29 30
    31 35 36 39 57 58
operator (64)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51, on right: 39
functionCall (65)
    on left: 52, on right: 32
arguments (66)
    on left: 53 54, on right: 52
argumentList (67)
    on left: 55 56, on right: 54 55
argument (68)
    on left: 57, on right: 55 56
precedence (69)
    on left: 58, on right: 38
reference (70)
    on left: 59 60, on right: 37
declaration (71)
    on left: 61 62 63, on right: 2
simpleDeclaration (72)
    on left: 64, on right: 61
pointerDeclaration (73)
    on left: 65, on right: 62
arrayDeclaration (74)
    on left: 66 67, on right: 63
variableType (75)
    on left: 68 69 70, on right: 5 8 9 64 65 66 67
literalList (76)
    on left: 71 72, on right: 67 71
literal (77)
    on left: 73 74 75 76 77, on right: 33 64 65 71 72
empty (78)
    on left: 78, on right: 1 6 14 53


state 0

    0 $accept: . program $end

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3
    '$'      shift, and go to state 4

    $default  reduce using rule 78 (empty)

    program             go to state 5
    function            go to state 6
    header              go to state 7
    declaration         go to state 8
    simpleDeclaration   go to state 9
    pointerDeclaration  go to state 10
    arrayDeclaration    go to state 11
    variableType        go to state 12
    empty               go to state 13


state 1

   68 variableType: KW_WORD .

    $default  reduce using rule 68 (variableType)


state 2

   69 variableType: KW_BOOL .

    $default  reduce using rule 69 (variableType)


state 3

   70 variableType: KW_BYTE .

    $default  reduce using rule 70 (variableType)


state 4

   65 pointerDeclaration: '$' . variableType TK_IDENTIFIER ':' literal ';'

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    variableType  go to state 14


state 5

    0 $accept: program . $end

    $end  shift, and go to state 15


state 6

    3 program: function . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3
    '$'      shift, and go to state 4

    $default  reduce using rule 78 (empty)

    program             go to state 16
    function            go to state 6
    header              go to state 7
    declaration         go to state 8
    simpleDeclaration   go to state 9
    pointerDeclaration  go to state 10
    arrayDeclaration    go to state 11
    variableType        go to state 12
    empty               go to state 13


state 7

    4 function: header . body ';'

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22
    '{'            shift, and go to state 23

    body           go to state 24
    command        go to state 25
    block          go to state 26
    simpleCommand  go to state 27
    assignment     go to state 28
    input          go to state 29
    output         go to state 30
    return         go to state 31
    if             go to state 32
    loop           go to state 33


state 8

    2 program: declaration . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3
    '$'      shift, and go to state 4

    $default  reduce using rule 78 (empty)

    program             go to state 34
    function            go to state 6
    header              go to state 7
    declaration         go to state 8
    simpleDeclaration   go to state 9
    pointerDeclaration  go to state 10
    arrayDeclaration    go to state 11
    variableType        go to state 12
    empty               go to state 13


state 9

   61 declaration: simpleDeclaration .

    $default  reduce using rule 61 (declaration)


state 10

   62 declaration: pointerDeclaration .

    $default  reduce using rule 62 (declaration)


state 11

   63 declaration: arrayDeclaration .

    $default  reduce using rule 63 (declaration)


state 12

    5 header: variableType . TK_IDENTIFIER '(' parameters ')'
   64 simpleDeclaration: variableType . TK_IDENTIFIER ':' literal ';'
   66 arrayDeclaration: variableType . TK_IDENTIFIER '[' ';'
   67                 | variableType . TK_IDENTIFIER '[' ':' literalList ';'

    TK_IDENTIFIER  shift, and go to state 35


state 13

    1 program: empty .

    $default  reduce using rule 1 (program)


state 14

   65 pointerDeclaration: '$' variableType . TK_IDENTIFIER ':' literal ';'

    TK_IDENTIFIER  shift, and go to state 36


state 15

    0 $accept: program $end .

    $default  accept


state 16

    3 program: function program .

    $default  reduce using rule 3 (program)


state 17

   29 if: KW_IF . '(' expression ')' KW_THEN command
   30   | KW_IF . '(' expression ')' KW_ELSE command KW_THEN command

    '('  shift, and go to state 37


state 18

   31 loop: KW_LOOP . command '(' expression ')'

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22
    '{'            shift, and go to state 23

    command        go to state 38
    block          go to state 26
    simpleCommand  go to state 27
    assignment     go to state 28
    input          go to state 29
    output         go to state 30
    return         go to state 31
    if             go to state 32
    loop           go to state 33


state 19

   24 input: KW_INPUT . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 39


state 20

   25 output: KW_OUTPUT . elementList

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    elementList   go to state 50
    expression    go to state 51
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 21

   28 return: KW_RETURN . expression

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 56
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 22

   22 assignment: TK_IDENTIFIER . '=' expression
   23           | TK_IDENTIFIER . '[' expression ']' '=' expression

    '='  shift, and go to state 57
    '['  shift, and go to state 58


state 23

   13 block: '{' . simpleCommandList '}'

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22

    $default  reduce using rule 78 (empty)

    simpleCommandList  go to state 59
    simpleCommand      go to state 60
    assignment         go to state 28
    input              go to state 29
    output             go to state 30
    return             go to state 31
    if                 go to state 32
    loop               go to state 33
    empty              go to state 61


state 24

    4 function: header body . ';'

    ';'  shift, and go to state 62


state 25

   10 body: command . ';'

    ';'  shift, and go to state 63


state 26

   11 command: block .

    $default  reduce using rule 11 (command)


state 27

   12 command: simpleCommand .

    $default  reduce using rule 12 (command)


state 28

   16 simpleCommand: assignment .

    $default  reduce using rule 16 (simpleCommand)


state 29

   17 simpleCommand: input .

    $default  reduce using rule 17 (simpleCommand)


state 30

   18 simpleCommand: output .

    $default  reduce using rule 18 (simpleCommand)


state 31

   19 simpleCommand: return .

    $default  reduce using rule 19 (simpleCommand)


state 32

   20 simpleCommand: if .

    $default  reduce using rule 20 (simpleCommand)


state 33

   21 simpleCommand: loop .

    $default  reduce using rule 21 (simpleCommand)


state 34

    2 program: declaration program .

    $default  reduce using rule 2 (program)


state 35

    5 header: variableType TK_IDENTIFIER . '(' parameters ')'
   64 simpleDeclaration: variableType TK_IDENTIFIER . ':' literal ';'
   66 arrayDeclaration: variableType TK_IDENTIFIER . '[' ';'
   67                 | variableType TK_IDENTIFIER . '[' ':' literalList ';'

    '('  shift, and go to state 64
    '['  shift, and go to state 65
    ':'  shift, and go to state 66


state 36

   65 pointerDeclaration: '$' variableType TK_IDENTIFIER . ':' literal ';'

    ':'  shift, and go to state 67


state 37

   29 if: KW_IF '(' . expression ')' KW_THEN command
   30   | KW_IF '(' . expression ')' KW_ELSE command KW_THEN command

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 68
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 38

   31 loop: KW_LOOP command . '(' expression ')'

    '('  shift, and go to state 69


state 39

   24 input: KW_INPUT TK_IDENTIFIER .

    $default  reduce using rule 24 (input)


state 40

   34 expression: TK_IDENTIFIER .
   35           | TK_IDENTIFIER . '[' expression ']'
   52 functionCall: TK_IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 70
    '['  shift, and go to state 71

    '('       [reduce using rule 34 (expression)]
    $default  reduce using rule 34 (expression)


state 41

   75 literal: LIT_INTEGER .

    $default  reduce using rule 75 (literal)


state 42

   77 literal: LIT_FALSE .

    $default  reduce using rule 77 (literal)


state 43

   76 literal: LIT_TRUE .

    $default  reduce using rule 76 (literal)


state 44

   74 literal: LIT_CHAR .

    $default  reduce using rule 74 (literal)


state 45

   73 literal: LIT_STRING .

    $default  reduce using rule 73 (literal)


state 46

   58 precedence: '(' . expression ')'

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 72
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 47

   36 expression: "!" . expression

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 73
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 48

   59 reference: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 74


state 49

   60 reference: '$' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 75


state 50

   25 output: KW_OUTPUT elementList .

    $default  reduce using rule 25 (output)


state 51

   26 elementList: expression . ',' elementList
   27            | expression .
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    ','           shift, and go to state 82
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    $default  reduce using rule 27 (elementList)

    operator  go to state 89


state 52

   32 expression: functionCall .

    $default  reduce using rule 32 (expression)


state 53

   38 expression: precedence .

    $default  reduce using rule 38 (expression)


state 54

   37 expression: reference .

    $default  reduce using rule 37 (expression)


state 55

   33 expression: literal .

    $default  reduce using rule 33 (expression)


state 56

   28 return: KW_RETURN expression .
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    $default  reduce using rule 28 (return)

    operator  go to state 89


state 57

   22 assignment: TK_IDENTIFIER '=' . expression

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 90
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 58

   23 assignment: TK_IDENTIFIER '[' . expression ']' '=' expression

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 91
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 59

   13 block: '{' simpleCommandList . '}'

    '}'  shift, and go to state 92


state 60

   15 simpleCommandList: simpleCommand . simpleCommandList

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22

    $default  reduce using rule 78 (empty)

    simpleCommandList  go to state 93
    simpleCommand      go to state 60
    assignment         go to state 28
    input              go to state 29
    output             go to state 30
    return             go to state 31
    if                 go to state 32
    loop               go to state 33
    empty              go to state 61


state 61

   14 simpleCommandList: empty .

    $default  reduce using rule 14 (simpleCommandList)


state 62

    4 function: header body ';' .

    $default  reduce using rule 4 (function)


state 63

   10 body: command ';' .

    $default  reduce using rule 10 (body)


state 64

    5 header: variableType TK_IDENTIFIER '(' . parameters ')'

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 78 (empty)

    parameters     go to state 94
    parameterList  go to state 95
    variableType   go to state 96
    empty          go to state 97


state 65

   66 arrayDeclaration: variableType TK_IDENTIFIER '[' . ';'
   67                 | variableType TK_IDENTIFIER '[' . ':' literalList ';'

    ';'  shift, and go to state 98
    ':'  shift, and go to state 99


state 66

   64 simpleDeclaration: variableType TK_IDENTIFIER ':' . literal ';'

    LIT_INTEGER  shift, and go to state 41
    LIT_FALSE    shift, and go to state 42
    LIT_TRUE     shift, and go to state 43
    LIT_CHAR     shift, and go to state 44
    LIT_STRING   shift, and go to state 45

    literal  go to state 100


state 67

   65 pointerDeclaration: '$' variableType TK_IDENTIFIER ':' . literal ';'

    LIT_INTEGER  shift, and go to state 41
    LIT_FALSE    shift, and go to state 42
    LIT_TRUE     shift, and go to state 43
    LIT_CHAR     shift, and go to state 44
    LIT_STRING   shift, and go to state 45

    literal  go to state 101


state 68

   29 if: KW_IF '(' expression . ')' KW_THEN command
   30   | KW_IF '(' expression . ')' KW_ELSE command KW_THEN command
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    ')'           shift, and go to state 102
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    operator  go to state 89


state 69

   31 loop: KW_LOOP command '(' . expression ')'

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 103
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 70

   52 functionCall: TK_IDENTIFIER '(' . arguments ')'

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    $default  reduce using rule 78 (empty)

    expression    go to state 104
    functionCall  go to state 52
    arguments     go to state 105
    argumentList  go to state 106
    argument      go to state 107
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55
    empty         go to state 108


state 71

   35 expression: TK_IDENTIFIER '[' . expression ']'

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 109
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 72

   39 expression: expression . operator expression
   58 precedence: '(' expression . ')'

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    ')'           shift, and go to state 110
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    operator  go to state 89


state 73

   36 expression: "!" expression .
   39           | expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    OPERATOR_LE   [reduce using rule 36 (expression)]
    OPERATOR_GE   [reduce using rule 36 (expression)]
    OPERATOR_EQ   [reduce using rule 36 (expression)]
    OPERATOR_NE   [reduce using rule 36 (expression)]
    OPERATOR_AND  [reduce using rule 36 (expression)]
    OPERATOR_OR   [reduce using rule 36 (expression)]
    "+"           [reduce using rule 36 (expression)]
    "-"           [reduce using rule 36 (expression)]
    "*"           [reduce using rule 36 (expression)]
    "/"           [reduce using rule 36 (expression)]
    "<"           [reduce using rule 36 (expression)]
    ">"           [reduce using rule 36 (expression)]
    $default      reduce using rule 36 (expression)

    operator  go to state 89


state 74

   59 reference: '&' TK_IDENTIFIER .

    $default  reduce using rule 59 (reference)


state 75

   60 reference: '$' TK_IDENTIFIER .

    $default  reduce using rule 60 (reference)


state 76

   46 operator: OPERATOR_LE .

    $default  reduce using rule 46 (operator)


state 77

   47 operator: OPERATOR_GE .

    $default  reduce using rule 47 (operator)


state 78

   48 operator: OPERATOR_EQ .

    $default  reduce using rule 48 (operator)


state 79

   49 operator: OPERATOR_NE .

    $default  reduce using rule 49 (operator)


state 80

   50 operator: OPERATOR_AND .

    $default  reduce using rule 50 (operator)


state 81

   51 operator: OPERATOR_OR .

    $default  reduce using rule 51 (operator)


state 82

   26 elementList: expression ',' . elementList

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    elementList   go to state 111
    expression    go to state 51
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 83

   40 operator: "+" .

    $default  reduce using rule 40 (operator)


state 84

   41 operator: "-" .

    $default  reduce using rule 41 (operator)


state 85

   42 operator: "*" .

    $default  reduce using rule 42 (operator)


state 86

   43 operator: "/" .

    $default  reduce using rule 43 (operator)


state 87

   44 operator: "<" .

    $default  reduce using rule 44 (operator)


state 88

   45 operator: ">" .

    $default  reduce using rule 45 (operator)


state 89

   39 expression: expression operator . expression

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 112
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 90

   22 assignment: TK_IDENTIFIER '=' expression .
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    $default  reduce using rule 22 (assignment)

    operator  go to state 89


state 91

   23 assignment: TK_IDENTIFIER '[' expression . ']' '=' expression
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    ']'           shift, and go to state 113
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    operator  go to state 89


state 92

   13 block: '{' simpleCommandList '}' .

    $default  reduce using rule 13 (block)


state 93

   15 simpleCommandList: simpleCommand simpleCommandList .

    $default  reduce using rule 15 (simpleCommandList)


state 94

    5 header: variableType TK_IDENTIFIER '(' parameters . ')'

    ')'  shift, and go to state 114


state 95

    7 parameters: parameterList .

    $default  reduce using rule 7 (parameters)


state 96

    8 parameterList: variableType . TK_IDENTIFIER ',' parameterList
    9              | variableType . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 115


state 97

    6 parameters: empty .

    $default  reduce using rule 6 (parameters)


state 98

   66 arrayDeclaration: variableType TK_IDENTIFIER '[' ';' .

    $default  reduce using rule 66 (arrayDeclaration)


state 99

   67 arrayDeclaration: variableType TK_IDENTIFIER '[' ':' . literalList ';'

    LIT_INTEGER  shift, and go to state 41
    LIT_FALSE    shift, and go to state 42
    LIT_TRUE     shift, and go to state 43
    LIT_CHAR     shift, and go to state 44
    LIT_STRING   shift, and go to state 45

    literalList  go to state 116
    literal      go to state 117


state 100

   64 simpleDeclaration: variableType TK_IDENTIFIER ':' literal . ';'

    ';'  shift, and go to state 118


state 101

   65 pointerDeclaration: '$' variableType TK_IDENTIFIER ':' literal . ';'

    ';'  shift, and go to state 119


state 102

   29 if: KW_IF '(' expression ')' . KW_THEN command
   30   | KW_IF '(' expression ')' . KW_ELSE command KW_THEN command

    KW_THEN  shift, and go to state 120
    KW_ELSE  shift, and go to state 121


state 103

   31 loop: KW_LOOP command '(' expression . ')'
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    ')'           shift, and go to state 122
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    operator  go to state 89


state 104

   39 expression: expression . operator expression
   57 argument: expression .

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    $default  reduce using rule 57 (argument)

    operator  go to state 89


state 105

   52 functionCall: TK_IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 123


state 106

   54 arguments: argumentList .

    $default  reduce using rule 54 (arguments)


state 107

   55 argumentList: argument . ',' argumentList
   56             | argument .

    ','  shift, and go to state 124

    $default  reduce using rule 56 (argumentList)


state 108

   53 arguments: empty .

    $default  reduce using rule 53 (arguments)


state 109

   35 expression: TK_IDENTIFIER '[' expression . ']'
   39           | expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    ']'           shift, and go to state 125
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    operator  go to state 89


state 110

   58 precedence: '(' expression ')' .

    $default  reduce using rule 58 (precedence)


state 111

   26 elementList: expression ',' elementList .

    $default  reduce using rule 26 (elementList)


state 112

   39 expression: expression . operator expression
   39           | expression operator expression .

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    OPERATOR_LE   [reduce using rule 39 (expression)]
    OPERATOR_GE   [reduce using rule 39 (expression)]
    OPERATOR_EQ   [reduce using rule 39 (expression)]
    OPERATOR_NE   [reduce using rule 39 (expression)]
    OPERATOR_AND  [reduce using rule 39 (expression)]
    OPERATOR_OR   [reduce using rule 39 (expression)]
    "+"           [reduce using rule 39 (expression)]
    "-"           [reduce using rule 39 (expression)]
    "*"           [reduce using rule 39 (expression)]
    "/"           [reduce using rule 39 (expression)]
    "<"           [reduce using rule 39 (expression)]
    ">"           [reduce using rule 39 (expression)]
    $default      reduce using rule 39 (expression)

    operator  go to state 89


state 113

   23 assignment: TK_IDENTIFIER '[' expression ']' . '=' expression

    '='  shift, and go to state 126


state 114

    5 header: variableType TK_IDENTIFIER '(' parameters ')' .

    $default  reduce using rule 5 (header)


state 115

    8 parameterList: variableType TK_IDENTIFIER . ',' parameterList
    9              | variableType TK_IDENTIFIER .

    ','  shift, and go to state 127

    $default  reduce using rule 9 (parameterList)


state 116

   67 arrayDeclaration: variableType TK_IDENTIFIER '[' ':' literalList . ';'

    ';'  shift, and go to state 128


state 117

   71 literalList: literal . literalList
   72            | literal .

    LIT_INTEGER  shift, and go to state 41
    LIT_FALSE    shift, and go to state 42
    LIT_TRUE     shift, and go to state 43
    LIT_CHAR     shift, and go to state 44
    LIT_STRING   shift, and go to state 45

    $default  reduce using rule 72 (literalList)

    literalList  go to state 129
    literal      go to state 117


state 118

   64 simpleDeclaration: variableType TK_IDENTIFIER ':' literal ';' .

    $default  reduce using rule 64 (simpleDeclaration)


state 119

   65 pointerDeclaration: '$' variableType TK_IDENTIFIER ':' literal ';' .

    $default  reduce using rule 65 (pointerDeclaration)


state 120

   29 if: KW_IF '(' expression ')' KW_THEN . command

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22
    '{'            shift, and go to state 23

    command        go to state 130
    block          go to state 26
    simpleCommand  go to state 27
    assignment     go to state 28
    input          go to state 29
    output         go to state 30
    return         go to state 31
    if             go to state 32
    loop           go to state 33


state 121

   30 if: KW_IF '(' expression ')' KW_ELSE . command KW_THEN command

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22
    '{'            shift, and go to state 23

    command        go to state 131
    block          go to state 26
    simpleCommand  go to state 27
    assignment     go to state 28
    input          go to state 29
    output         go to state 30
    return         go to state 31
    if             go to state 32
    loop           go to state 33


state 122

   31 loop: KW_LOOP command '(' expression ')' .

    $default  reduce using rule 31 (loop)


state 123

   52 functionCall: TK_IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 52 (functionCall)


state 124

   55 argumentList: argument ',' . argumentList

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 104
    functionCall  go to state 52
    argumentList  go to state 132
    argument      go to state 107
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 125

   35 expression: TK_IDENTIFIER '[' expression ']' .

    $default  reduce using rule 35 (expression)


state 126

   23 assignment: TK_IDENTIFIER '[' expression ']' '=' . expression

    TK_IDENTIFIER  shift, and go to state 40
    LIT_INTEGER    shift, and go to state 41
    LIT_FALSE      shift, and go to state 42
    LIT_TRUE       shift, and go to state 43
    LIT_CHAR       shift, and go to state 44
    LIT_STRING     shift, and go to state 45
    '('            shift, and go to state 46
    "!"            shift, and go to state 47
    '&'            shift, and go to state 48
    '$'            shift, and go to state 49

    expression    go to state 133
    functionCall  go to state 52
    precedence    go to state 53
    reference     go to state 54
    literal       go to state 55


state 127

    8 parameterList: variableType TK_IDENTIFIER ',' . parameterList

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    parameterList  go to state 134
    variableType   go to state 96


state 128

   67 arrayDeclaration: variableType TK_IDENTIFIER '[' ':' literalList ';' .

    $default  reduce using rule 67 (arrayDeclaration)


state 129

   71 literalList: literal literalList .

    $default  reduce using rule 71 (literalList)


state 130

   29 if: KW_IF '(' expression ')' KW_THEN command .

    $default  reduce using rule 29 (if)


state 131

   30 if: KW_IF '(' expression ')' KW_ELSE command . KW_THEN command

    KW_THEN  shift, and go to state 135


state 132

   55 argumentList: argument ',' argumentList .

    $default  reduce using rule 55 (argumentList)


state 133

   23 assignment: TK_IDENTIFIER '[' expression ']' '=' expression .
   39 expression: expression . operator expression

    OPERATOR_LE   shift, and go to state 76
    OPERATOR_GE   shift, and go to state 77
    OPERATOR_EQ   shift, and go to state 78
    OPERATOR_NE   shift, and go to state 79
    OPERATOR_AND  shift, and go to state 80
    OPERATOR_OR   shift, and go to state 81
    "+"           shift, and go to state 83
    "-"           shift, and go to state 84
    "*"           shift, and go to state 85
    "/"           shift, and go to state 86
    "<"           shift, and go to state 87
    ">"           shift, and go to state 88

    $default  reduce using rule 23 (assignment)

    operator  go to state 89


state 134

    8 parameterList: variableType TK_IDENTIFIER ',' parameterList .

    $default  reduce using rule 8 (parameterList)


state 135

   30 if: KW_IF '(' expression ')' KW_ELSE command KW_THEN . command

    KW_IF          shift, and go to state 17
    KW_LOOP        shift, and go to state 18
    KW_INPUT       shift, and go to state 19
    KW_OUTPUT      shift, and go to state 20
    KW_RETURN      shift, and go to state 21
    TK_IDENTIFIER  shift, and go to state 22
    '{'            shift, and go to state 23

    command        go to state 136
    block          go to state 26
    simpleCommand  go to state 27
    assignment     go to state 28
    input          go to state 29
    output         go to state 30
    return         go to state 31
    if             go to state 32
    loop           go to state 33


state 136

   30 if: KW_IF '(' expression ')' KW_ELSE command KW_THEN command .

    $default  reduce using rule 30 (if)
